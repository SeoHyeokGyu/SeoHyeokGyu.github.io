---
layout: post
title:  "Spring Boot 첫 예제"
date:   2021-05-06
categories: Java SpringBoot PostMan MySQL
---

## Spring Boot를 활용하여 Product에 대한 CRUD 메소드를 제공하는 REST API를 구현하라.

## 조건
* Database 이름: helloProductDB

* Product Table 이름: productTable

* data.sql를 이용하여 미리 10개 이상의 Product 생성

* Spring Security 기능은 사용하지 않음

* Postman을 활용하여 API 요청 및 응답 메시지를 보일 것

***

### Main URL
 http://localhost:9090/api/v1/

### API method

[ProductController.java](https://github.com/SeoHyeokGyu/helloSpringBoot/blob/master/src/main/java/kr/ac/hansung/cse/controller/ProductController.java)

* Create/Add(POST) create new product: http://localhost:9090/api/v1/products

```Java
	@PostMapping(value = "/products")
	public ResponseEntity<Product> postProduct(@RequestBody Product product) {
		try {
			Product _product = repository.save(new Product( product.getName(), product.getCategory(), product.getPrice(), product.getManufacturer(), product.getUnitInStock() , product.getDescription() ));
			return new ResponseEntity<>( _product, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.EXPECTATION_FAILED);
		}
	}
```

<img width="1504" alt="스크린샷 2020-06-24 오후 6 16 32" src="https://user-images.githubusercontent.com/20594299/117182294-21391c00-ae11-11eb-8520-23d66e8a7188.png">

* Retrieve/Get (GET) Get full list of products: http://localhost:9090/api/v1/products

```Java 	
@GetMapping("/products")
	public ResponseEntity<List<Product>> getAllCustomers() {
		List<Product> products = new ArrayList<>();
		try {
			repository.findAll().forEach(products::add);
// 조회한다.
			if (products.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(products, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
 ```
<img width="1504" alt="스크린샷 2020-06-24 오후 3 21 33" src="https://user-images.githubusercontent.com/20594299/117182314-25653980-ae11-11eb-99df-720e96a3a1cb.png">

* Get details of products with id=N: http://localhost:9090/api/v1/products/{id}

```Java
@GetMapping("/products/{id}")
	public ResponseEntity<Product> getProductById(@PathVariable("id") int id) {
		Optional<Product> productData = repository.findById(id);

		if (productData.isPresent()) {
			return new ResponseEntity<>(productData.get(), HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
```
<img width="1504" alt="스크린샷 2020-06-24 오후 3 23 32" src="https://user-images.githubusercontent.com/20594299/117182315-25fdd000-ae11-11eb-9a47-1b31565a9e51.png">

* Fetch all products of a category: http://localhost:9090/api/v1/products/category/{category}

```Java
@GetMapping(value = "products/category/{category}")
	public ResponseEntity<List<Product>> findAllByCategory(@PathVariable String category) {
		try {
			List<Product> products = repository.findAllByCategory(category);

			if (products.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(products, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
		}
	}
```
<img width="1504" alt="스크린샷 2020-06-24 오후 4 08 17" src="https://user-images.githubusercontent.com/20594299/117182287-2007ef00-ae11-11eb-911d-93bdefd86fe8.png">

- Update (PUT): modify values of product with id=N:  http://localhost:9090/api/v1/products/{id}

```Java
@PutMapping("/products/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable("id") int id, @RequestBody Product product) {
		Optional<Product> productData = repository.findById(id);

		if (productData.isPresent()) {
			Product _product = productData.get();
			_product.setName(product.getName());
			_product.setCategory(product.getCategory());
			_product.setPrice(product.getPrice());
			_product.setManufacturer(product.getManufacturer());
			_product.setUnitInStock(product.getUnitInStock());
			_product.setDescription(product.getDescription());

			return new ResponseEntity<>(repository.save(_product), HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
```
<img width="1504" alt="스크린샷 2020-06-24 오후 6 16 45" src="https://user-images.githubusercontent.com/20594299/117182298-21d1b280-ae11-11eb-80e1-b16df55d1a4e.png">

- Delete (DELETE): delete product with id=N: http://localhost:9090/api/v1/products/{id}

```Java
@DeleteMapping("/products/{id}")
	public ResponseEntity<HttpStatus> deleteProduct(@PathVariable("id") int id) {
		try {
			repository.deleteById(id);
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
		}
	}
```

<img width="1504" alt="스크린샷 2020-06-24 오후 7 20 08" src="https://user-images.githubusercontent.com/20594299/117182611-85f47680-ae11-11eb-990e-679bed10099d.png">

### Spring Boot의 actuator를 활용하여 Products REST API에 대한 URL Mapping 정보를 캡쳐해서 보여라.
<img width="1504" alt="스크린샷 2020-06-24 오후 3 01 19" src="https://user-images.githubusercontent.com/20594299/117182303-2302df80-ae11-11eb-8792-b1b45bbf6baa.png">

<img width="1504" alt="스크린샷 2020-06-24 오후 3 01 48" src="https://user-images.githubusercontent.com/20594299/117182309-239b7600-ae11-11eb-8859-537069ee4294.png">

<img width="1504" alt="스크린샷 2020-06-24 오후 3 01 57" src="https://user-images.githubusercontent.com/20594299/117182312-24cca300-ae11-11eb-8c91-89651eb5e8da.png">
